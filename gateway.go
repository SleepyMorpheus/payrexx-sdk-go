package payrexxsdk

import (
	"errors"
	"fmt"
	"net/http"
)

type GatewayStatus string

const (
	GatewayStatusWaiting    GatewayStatus = "waiting"
	GatewayStatusConfirmed  GatewayStatus = "confirmed"
	GatewayStatusAuthorized GatewayStatus = "authorized"
	GatewayStatusReserved   GatewayStatus = "reserved"
)

// Gateway is a combination of Body & Head representing a
// complete gateway
type Gateway struct {
	GatewayHead
	GatewayBody
}

// GatewayBody represents the data needed to create a gateway at payrexx
type GatewayBody struct {
	// (REQ) Amount of payment in cents
	Amount int32 `json:"amount"`
	// (OPT) VAT Rate Percentage (nil meaning not set)
	VatRate *float32 `json:"vatRate,omitempty"`
	// (REQ) Currency of payment (ISO code)
	Currency string `json:"currency"`
	// (OPT) Product stock keeping unit
	Sku *string `json:"sku,"`
	// The purpose of the payment
	Purpose *string `json:"purpose"`
}

// GatewayHead represents the data which gets generated by creating
// a gateway with Payrexx
type GatewayHead struct {
	ID     int32         `json:"id"`
	Status GatewayStatus `json:"status"`
	Hash   string        `json:"hash"`
	Link   string        `json:"link"`
}

func (g GatewayBody) String() string {
	return fmt.Sprintf("GatewayBody: Amount=%d Currency=%s VatRate=%g SKU=%s Purpose=%s", g.Amount, g.Currency, g.VatRate, g.Sku, g.Purpose)
}
func (g GatewayHead) String() string {
	return fmt.Sprintf("GatewayHead: ID=%d Status=%s Hash=%s Link=%s", g.ID, g.Status, g.Hash, g.Link)
}
func (g Gateway) String() string {
	return fmt.Sprintf("%s\n%s", g.GatewayHead.String(), g.GatewayBody.String())
}

// GatewayCreate creates a mew gateway with Payrexx talking a GatewayBody
// and returning the newly created Gateway. Otherwise, returns an error
func (c *Client) GatewayCreate(gateway GatewayBody) (*Gateway, error) {
	req, err := c.NewRequest(http.MethodPost, fmt.Sprintf("Gateway"), gateway)
	if err != nil {
		return nil, err
	}

	resp := &Response[Gateway]{}
	err = c.Send(req, resp)
	if err != nil {
		return nil, err
	}

	if resp.Status != RequestStatusSuccess {
		return nil, errors.New(fmt.Sprintf("Failed to create gateway: %s", resp.Message))
	}

	return &resp.Data[0], err
}

// GatewayDelete returns an error
func (c *Client) GatewayDelete(id int32) error {
	req, err := c.NewRequest(http.MethodDelete, fmt.Sprintf("Gateway/%d", id), nil)
	if err != nil {
		return err
	}

	resp := &Response[struct {
		Id int32 `json:"id"`
	}]{}
	err = c.Send(req, resp)

	if err != nil {
		return err
	}

	if resp.Status != RequestStatusSuccess {
		return errors.New(fmt.Sprintf("Failed to create gateway: %s", resp.Message))
	}

	return nil
}

// GatewayRetrieve retrieves a gateway by its ID or returns an error otherwise
//
// Returns error payrexxsdk.ResourceNotFoundAPIError if not found
func (c *Client) GatewayRetrieve(id int32) (*Gateway, error) {
	req, err := c.NewRequest(http.MethodGet, fmt.Sprintf("Gateway/%d", id), nil)
	if err != nil {
		return nil, err
	}

	resp := &Response[Gateway]{}
	err = c.Send(req, resp)
	if err != nil {
		return nil, err
	}

	if resp.Status != RequestStatusSuccess {
		return nil, ResourceNotFoundAPIError
	}

	return &resp.Data[0], err
}
