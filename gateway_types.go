package payrexxsdk

import (
	"encoding/json"
	"fmt"
	"time"
)

type GatewayStatus string

const (
	GatewayStatusWaiting    GatewayStatus = "waiting"
	GatewayStatusConfirmed  GatewayStatus = "confirmed"
	GatewayStatusAuthorized GatewayStatus = "authorized"
	GatewayStatusReserved   GatewayStatus = "reserved"
)

// Gateway is a combination of Body & Head representing a
// complete gateway
type Gateway struct {
	GatewayHead
	GatewayBody
}

// GatewayBody represents the data needed to create a gateway at payrexx
type GatewayBody struct {
	// (REQ) Amount of payment in cents
	Amount int32 `json:"amount"`
	// (OPT) VAT Rate Percentage
	VatRate float32 `json:"vatRate,omitempty"`
	// (REQ) Currency of payment (ISO code)
	Currency string `json:"currency"`
	// (OPT) Product stock keeping unit
	Sku string `json:"sku,omitempty"`
	// The purpose of the payment
	Purpose string `json:"purpose,omitempty"`
}

// GatewayHead represents the data which gets generated by creating
// a gateway with Payrexx
type GatewayHead struct {
	ID        int32         `json:"id"`
	Status    GatewayStatus `json:"status"`
	Hash      string        `json:"hash"`
	Link      string        `json:"link"`
	CreatedAt time.Time     `json:"createdAt"`
}

func (g GatewayBody) String() string {
	outBody, err := json.Marshal(g)
	if err != nil {
		return ""
	}

	return fmt.Sprintf("GatewayBody: %s", string(outBody))
}

func (g GatewayHead) String() string {
	outHead, err := json.Marshal(g)
	if err != nil {
		return ""
	}

	return fmt.Sprintf("GatewayHead: %s", string(outHead))
}
func (g Gateway) String() string {
	return fmt.Sprintf("%s\n%s", g.GatewayHead.String(), g.GatewayBody.String())
}
